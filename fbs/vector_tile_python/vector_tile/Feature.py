# automatically generated by the FlatBuffers compiler, do not modify

# namespace: vector_tile

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Feature(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Feature()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFeature(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Feature
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Feature
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Feature
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Feature
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Feature
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Feature
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Feature
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Feature
    def Geometry(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Feature
    def GeometryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # Feature
    def GeometryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Feature
    def GeometryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def FeatureStart(builder):
    builder.StartObject(4)

def Start(builder):
    FeatureStart(builder)

def FeatureAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    FeatureAddId(builder, id)

def FeatureAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    FeatureAddTags(builder, tags)

def FeatureStartTagsVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartTagsVector(builder, numElems: int) -> int:
    return FeatureStartTagsVector(builder, numElems)

def FeatureAddType(builder, type):
    builder.PrependInt8Slot(2, type, 0)

def AddType(builder, type):
    FeatureAddType(builder, type)

def FeatureAddGeometry(builder, geometry):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(geometry), 0)

def AddGeometry(builder, geometry):
    FeatureAddGeometry(builder, geometry)

def FeatureStartGeometryVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartGeometryVector(builder, numElems: int) -> int:
    return FeatureStartGeometryVector(builder, numElems)

def FeatureEnd(builder):
    return builder.EndObject()

def End(builder):
    return FeatureEnd(builder)
