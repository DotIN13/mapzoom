// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TagType } from '../vector-tile/tag-type.js';


export class Value {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Value {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsValue(bb:flatbuffers.ByteBuffer, obj?:Value):Value {
  return (obj || new Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsValue(bb:flatbuffers.ByteBuffer, obj?:Value):Value {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Value()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tagType():TagType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TagType.STRING;
}

stringValue():string|null
stringValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stringValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

floatValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

doubleValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

intValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

uintValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

boolValue():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startValue(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addTagType(builder:flatbuffers.Builder, tagType:TagType) {
  builder.addFieldInt8(0, tagType, TagType.STRING);
}

static addStringValue(builder:flatbuffers.Builder, stringValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stringValueOffset, 0);
}

static addFloatValue(builder:flatbuffers.Builder, floatValue:number) {
  builder.addFieldFloat32(2, floatValue, 0.0);
}

static addDoubleValue(builder:flatbuffers.Builder, doubleValue:number) {
  builder.addFieldFloat64(3, doubleValue, 0.0);
}

static addIntValue(builder:flatbuffers.Builder, intValue:number) {
  builder.addFieldInt32(4, intValue, 0);
}

static addUintValue(builder:flatbuffers.Builder, uintValue:number) {
  builder.addFieldInt32(5, uintValue, 0);
}

static addBoolValue(builder:flatbuffers.Builder, boolValue:boolean) {
  builder.addFieldInt8(6, +boolValue, +false);
}

static endValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createValue(builder:flatbuffers.Builder, tagType:TagType, stringValueOffset:flatbuffers.Offset, floatValue:number, doubleValue:number, intValue:number, uintValue:number, boolValue:boolean):flatbuffers.Offset {
  Value.startValue(builder);
  Value.addTagType(builder, tagType);
  Value.addStringValue(builder, stringValueOffset);
  Value.addFloatValue(builder, floatValue);
  Value.addDoubleValue(builder, doubleValue);
  Value.addIntValue(builder, intValue);
  Value.addUintValue(builder, uintValue);
  Value.addBoolValue(builder, boolValue);
  return Value.endValue(builder);
}
}
