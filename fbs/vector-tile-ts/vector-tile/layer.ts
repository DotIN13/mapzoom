// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Feature, FeatureT } from '../vector-tile/feature.js';


export class Layer implements flatbuffers.IUnpackableObject<LayerT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Layer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 1;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

features(index: number, obj?:Feature):Feature|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Feature()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

featuresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

keys(index: number):string
keys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stringValues(index: number):string
stringValues(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stringValues(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stringValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

floatValues(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

floatValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

floatValuesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

doubleValues(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

doubleValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

doubleValuesArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

intValues(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

intValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

intValuesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

uintValues(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

uintValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

uintValuesArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

boolValues(index: number):boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : false;
}

boolValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

boolValuesArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

extent():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 4096;
}

static startLayer(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(0, version, 1);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addFeatures(builder:flatbuffers.Builder, featuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, featuresOffset, 0);
}

static createFeaturesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFeaturesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStringValues(builder:flatbuffers.Builder, stringValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, stringValuesOffset, 0);
}

static createStringValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStringValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFloatValues(builder:flatbuffers.Builder, floatValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, floatValuesOffset, 0);
}

static createFloatValuesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createFloatValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createFloatValuesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startFloatValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDoubleValues(builder:flatbuffers.Builder, doubleValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, doubleValuesOffset, 0);
}

static createDoubleValuesVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDoubleValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDoubleValuesVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startDoubleValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addIntValues(builder:flatbuffers.Builder, intValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, intValuesOffset, 0);
}

static createIntValuesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createIntValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createIntValuesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startIntValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUintValues(builder:flatbuffers.Builder, uintValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, uintValuesOffset, 0);
}

static createUintValuesVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createUintValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createUintValuesVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startUintValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBoolValues(builder:flatbuffers.Builder, boolValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, boolValuesOffset, 0);
}

static createBoolValuesVector(builder:flatbuffers.Builder, data:boolean[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(+data[i]!);
  }
  return builder.endVector();
}

static startBoolValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addExtent(builder:flatbuffers.Builder, extent:number) {
  builder.addFieldInt32(10, extent, 4096);
}

static endLayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLayer(builder:flatbuffers.Builder, version:number, nameOffset:flatbuffers.Offset, featuresOffset:flatbuffers.Offset, keysOffset:flatbuffers.Offset, stringValuesOffset:flatbuffers.Offset, floatValuesOffset:flatbuffers.Offset, doubleValuesOffset:flatbuffers.Offset, intValuesOffset:flatbuffers.Offset, uintValuesOffset:flatbuffers.Offset, boolValuesOffset:flatbuffers.Offset, extent:number):flatbuffers.Offset {
  Layer.startLayer(builder);
  Layer.addVersion(builder, version);
  Layer.addName(builder, nameOffset);
  Layer.addFeatures(builder, featuresOffset);
  Layer.addKeys(builder, keysOffset);
  Layer.addStringValues(builder, stringValuesOffset);
  Layer.addFloatValues(builder, floatValuesOffset);
  Layer.addDoubleValues(builder, doubleValuesOffset);
  Layer.addIntValues(builder, intValuesOffset);
  Layer.addUintValues(builder, uintValuesOffset);
  Layer.addBoolValues(builder, boolValuesOffset);
  Layer.addExtent(builder, extent);
  return Layer.endLayer(builder);
}

unpack(): LayerT {
  return new LayerT(
    this.version(),
    this.name(),
    this.bb!.createObjList<Feature, FeatureT>(this.features.bind(this), this.featuresLength()),
    this.bb!.createScalarList<string>(this.keys.bind(this), this.keysLength()),
    this.bb!.createScalarList<string>(this.stringValues.bind(this), this.stringValuesLength()),
    this.bb!.createScalarList<number>(this.floatValues.bind(this), this.floatValuesLength()),
    this.bb!.createScalarList<number>(this.doubleValues.bind(this), this.doubleValuesLength()),
    this.bb!.createScalarList<number>(this.intValues.bind(this), this.intValuesLength()),
    this.bb!.createScalarList<number>(this.uintValues.bind(this), this.uintValuesLength()),
    this.bb!.createScalarList<boolean>(this.boolValues.bind(this), this.boolValuesLength()),
    this.extent()
  );
}


unpackTo(_o: LayerT): void {
  _o.version = this.version();
  _o.name = this.name();
  _o.features = this.bb!.createObjList<Feature, FeatureT>(this.features.bind(this), this.featuresLength());
  _o.keys = this.bb!.createScalarList<string>(this.keys.bind(this), this.keysLength());
  _o.stringValues = this.bb!.createScalarList<string>(this.stringValues.bind(this), this.stringValuesLength());
  _o.floatValues = this.bb!.createScalarList<number>(this.floatValues.bind(this), this.floatValuesLength());
  _o.doubleValues = this.bb!.createScalarList<number>(this.doubleValues.bind(this), this.doubleValuesLength());
  _o.intValues = this.bb!.createScalarList<number>(this.intValues.bind(this), this.intValuesLength());
  _o.uintValues = this.bb!.createScalarList<number>(this.uintValues.bind(this), this.uintValuesLength());
  _o.boolValues = this.bb!.createScalarList<boolean>(this.boolValues.bind(this), this.boolValuesLength());
  _o.extent = this.extent();
}
}

export class LayerT implements flatbuffers.IGeneratedObject {
constructor(
  public version: number = 1,
  public name: string|Uint8Array|null = null,
  public features: (FeatureT)[] = [],
  public keys: (string)[] = [],
  public stringValues: (string)[] = [],
  public floatValues: (number)[] = [],
  public doubleValues: (number)[] = [],
  public intValues: (number)[] = [],
  public uintValues: (number)[] = [],
  public boolValues: (boolean)[] = [],
  public extent: number = 4096
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const features = Layer.createFeaturesVector(builder, builder.createObjectOffsetList(this.features));
  const keys = Layer.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
  const stringValues = Layer.createStringValuesVector(builder, builder.createObjectOffsetList(this.stringValues));
  const floatValues = Layer.createFloatValuesVector(builder, this.floatValues);
  const doubleValues = Layer.createDoubleValuesVector(builder, this.doubleValues);
  const intValues = Layer.createIntValuesVector(builder, this.intValues);
  const uintValues = Layer.createUintValuesVector(builder, this.uintValues);
  const boolValues = Layer.createBoolValuesVector(builder, this.boolValues);

  return Layer.createLayer(builder,
    this.version,
    name,
    features,
    keys,
    stringValues,
    floatValues,
    doubleValues,
    intValues,
    uintValues,
    boolValues,
    this.extent
  );
}
}
