# automatically generated by the FlatBuffers compiler, do not modify

# namespace: vector_tile

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Value(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Value()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Value
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Value
    def TagType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Value
    def StringValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Value
    def FloatValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def DoubleValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value
    def IntValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Value
    def UintValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Value
    def BoolValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ValueStart(builder):
    builder.StartObject(7)

def Start(builder):
    ValueStart(builder)

def ValueAddTagType(builder, tagType):
    builder.PrependInt8Slot(0, tagType, 0)

def AddTagType(builder, tagType):
    ValueAddTagType(builder, tagType)

def ValueAddStringValue(builder, stringValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stringValue), 0)

def AddStringValue(builder, stringValue):
    ValueAddStringValue(builder, stringValue)

def ValueAddFloatValue(builder, floatValue):
    builder.PrependFloat32Slot(2, floatValue, 0.0)

def AddFloatValue(builder, floatValue):
    ValueAddFloatValue(builder, floatValue)

def ValueAddDoubleValue(builder, doubleValue):
    builder.PrependFloat64Slot(3, doubleValue, 0.0)

def AddDoubleValue(builder, doubleValue):
    ValueAddDoubleValue(builder, doubleValue)

def ValueAddIntValue(builder, intValue):
    builder.PrependInt32Slot(4, intValue, 0)

def AddIntValue(builder, intValue):
    ValueAddIntValue(builder, intValue)

def ValueAddUintValue(builder, uintValue):
    builder.PrependUint32Slot(5, uintValue, 0)

def AddUintValue(builder, uintValue):
    ValueAddUintValue(builder, uintValue)

def ValueAddBoolValue(builder, boolValue):
    builder.PrependBoolSlot(6, boolValue, 0)

def AddBoolValue(builder, boolValue):
    ValueAddBoolValue(builder, boolValue)

def ValueEnd(builder):
    return builder.EndObject()

def End(builder):
    return ValueEnd(builder)
