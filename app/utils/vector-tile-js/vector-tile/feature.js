// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { GeomType } from './geom-type.js';
export class Feature {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsFeature(bb, obj) {
        return (obj || new Feature()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsFeature(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Feature()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    tags(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    tagsLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tagsArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    tagTypes(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    tagTypesLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tagTypesArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : GeomType.UNKNOWN;
    }
    geometry(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    geometryLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    geometryArray() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startFeature(builder) {
        builder.startObject(5);
    }
    static addId(builder, id) {
        builder.addFieldInt32(0, id, 0);
    }
    static addTags(builder, tagsOffset) {
        builder.addFieldOffset(1, tagsOffset, 0);
    }
    static createTagsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startTagsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addTagTypes(builder, tagTypesOffset) {
        builder.addFieldOffset(2, tagTypesOffset, 0);
    }
    static createTagTypesVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startTagTypesVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addType(builder, type) {
        builder.addFieldInt8(3, type, GeomType.UNKNOWN);
    }
    static addGeometry(builder, geometryOffset) {
        builder.addFieldOffset(4, geometryOffset, 0);
    }
    static createGeometryVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startGeometryVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endFeature(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createFeature(builder, id, tagsOffset, tagTypesOffset, type, geometryOffset) {
        Feature.startFeature(builder);
        Feature.addId(builder, id);
        Feature.addTags(builder, tagsOffset);
        Feature.addTagTypes(builder, tagTypesOffset);
        Feature.addType(builder, type);
        Feature.addGeometry(builder, geometryOffset);
        return Feature.endFeature(builder);
    }
}
