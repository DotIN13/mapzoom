// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Layer } from './layer.js';
export class Tile {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTile(bb, obj) {
        return (obj || new Tile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTile(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Tile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    layers(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Layer()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    layersLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startTile(builder) {
        builder.startObject(1);
    }
    static addLayers(builder, layersOffset) {
        builder.addFieldOffset(0, layersOffset, 0);
    }
    static createLayersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startLayersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endTile(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishTileBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedTileBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createTile(builder, layersOffset) {
        Tile.startTile(builder);
        Tile.addLayers(builder, layersOffset);
        return Tile.endTile(builder);
    }
}
